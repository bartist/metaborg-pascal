module pascal-static-semantics

language Pascal
start symbol Program

fixture [[
	program test ();
	[[...]]
]]

//Constants

test contsant resolve [[
const
 	[[maxnumber]] = 500;
 var
 	number : integer;
 begin
 	number := [[maxnumber]]
 end.
]] resolve #2 to #1

test constant resolve from type [[
 const
 	[[maxnumber]] = 500;
  type
  	intArr = array [1..[[maxnumber]] ] of integer;
 begin
 end.
]] resolve #2 to #1

test constant resolve from procedure [[
 const
 	[[maxnumber]] = 500;
procedure f(x: integer);
	begin
		x := [[maxnumber]]
	end;
 begin
 end.
]] resolve #2 to #1

test constant resolve from function [[
 const
 	[[maxnumber]] = 500;
function f(x: integer): integer;
	begin
		f := [[maxnumber]]
	end;
 begin
 end.
]] resolve #2 to #1

test constant resolve from nested [[
 const
 	[[maxnumber]] = 500;
function f(x: integer): integer;
	function g(x: integer): integer;
		begin
			g := [[maxnumber]]
		end;
	begin
		f := g(1)
	end;
 begin
 end.
]] resolve #2 to #1

// Type

test type resolve [[
  type
  	[[intArr]] = array [1..50] of integer;
  var
  	numArr : [[intArr]];
  begin
  end.  	
]] resolve #2 to #1

test type resolve to function [[
  type
  	[[intArr]] = array [1..50] of integer;
  function f(x : intArr) : [[intArr]];
	  begin
	  	f := x
	  end;
  begin
  end.  	
]] resolve #2 to #1

test type resolve to function parameter [[
  type
  	[[intArr]] = array [1..50] of integer;
  function f(x : [[intArr]]) : intArr;
	  begin
	  	f := x
	  end;
  begin
  end.  	
]] resolve #2 to #1

test type resolve to function type [[
  type
  	[[intArr]] = array [1..50] of integer;
  function f(x : intArr) : intArr;
  	  type
  	  	intMatrix = array[1..50] of [[intArr]];
	  begin
	  	f := x
	  end;
  begin
  end.  	
]] resolve #2 to #1

test type resolve to procedure [[
  type
  	[[intArr]] = array [1..50] of integer;
  procedure f(x : [[intArr]]);
	  begin
	  end;
  begin
  end.  	
]] resolve #2 to #1


test type resolve to function type [[
  type
  	[[intArr]] = array [1..50] of integer;
  procedure f(x : intArr);
  	  type
  	  	intMatrix = array[1..50] of [[intArr]];
	  begin
	  end;
  begin
  end.  	
]] resolve #2 to #1

// variables

test variable resolve [[ 
  var
    [[x]] : boolean;
  begin
    x := [[x]]
  end.
]] resolve #2 to #1 

test variable resolve in higher scope [[ 
  var
    [[x]] : boolean;
  procedure f(i : boolean);
    var
      [[x]] : boolean;
    begin
      i := [[x]]
    end;
  begin
    x := f(true)
  end.
]] resolve #3 to #2 

test variable resolve to lower scope [[ 
  var
    [[x]] : boolean;
  procedure f(i : boolean);
    begin
      i := [[x]]
    end;
  begin
    x := f(true)
  end.
]] resolve #2 to #1 

test variable resolve nested function [[
  var
    [[x]]: integer;
  function f(s: integer): integer;
  	  function g(s: integer): integer;
	  begin
	  	g := [[x]]
	  end;
  begin
  	f := g([[x]])
  end;
 begin
 	x := f(2)
 end.
]] resolve #2 to #1

// Function

test function resolve [[
  var
    x: integer;
  function [[f]](x : integer): integer;
  begin
  	f := 2
  end;
 begin
 	x := [[f]]()
 end.
]] resolve #2 to #1

test function parameter resolve [[
  var
    [[x]]: integer;
  function f([[x]]: integer): integer;
  begin
  	f := [[x]]
  end;
 begin
 	x := f(2)
 end.
]] resolve #2 to #1

test nested function parameter resolve [[
  var
    [[x]]: integer;
  function f([[x]]: integer): integer;
  	  function g([[x]]: integer): integer;
	  begin
	  	g := [[x]]
	  end;
  begin
  	f := g([[x]])
  end;
 begin
 	x := f(2)
 end.
]] resolve #4 to #3

test nested function parameter resolve 2 [[
  var
    [[x]]: integer;
  function f([[x]]: integer): integer;
  	  function g(s: integer): integer;
	  begin
	  	g := [[x]]
	  end;
  begin
  	f := g([[x]])
  end;
 begin
 	x := f(2)
 end.
]] resolve #3 to #2

// Procedure

test procedure resolve [[
procedure[[f]](x : integer);
  begin
  end;
 begin
 	[[f]]()
 end.
]] resolve #2 to #1

test procedure parameter resolve [[ 
  var
    x : boolean;
  procedure f([[x]] : integer); 
    begin      
      x := [[x]]
    end;
  begin
  end.
]] resolve #2 to #1 

test nested procedure parameter resolve [[
  var
    [[x]]: integer;
  procedure f([[x]]: integer);
  	  procedure g([[x]]: integer);
	  begin
	  	x := [[x]]
	  end;
  begin
  	g([[x]])
  end;
 begin
 	f(2)
 end.
]] resolve #4 to #3

test nested procedure parameter resolve 2 [[
  var
    [[x]]: integer;
  procedure f([[x]]: integer);
  	  procedure g(s: integer);
	  begin
	  	s := [[x]]
	  end;
  begin
  	g([[x]])
  end;
 begin
 	f(2)
 end.
]] resolve #3 to #2



// Same name different scope


// errors:

// duplication

// missing definition


// not resolve to higher scope

